From 7825ec6ceb298e40c6044f1cfccd6b08c3b011ec Mon Sep 17 00:00:00 2001
From: Pradeep M <pradeep@inforcecomputing.com>
Date: Thu, 24 Nov 2016 15:32:00 +0530
Subject: [PATCH 10/17] regulators:rpm: ldo mode configuration

Signed-off-by: Pradeep M <pradeep@inforcecomputing.com>
---
 drivers/regulator/qcom_smd-regulator.c | 45 +++++++++++++++++++++++++++++++---
 1 file changed, 42 insertions(+), 3 deletions(-)

diff --git a/drivers/regulator/qcom_smd-regulator.c b/drivers/regulator/qcom_smd-regulator.c
index 9faef1d..1818db2 100644
--- a/drivers/regulator/qcom_smd-regulator.c
+++ b/drivers/regulator/qcom_smd-regulator.c
@@ -49,6 +49,17 @@ struct rpm_regulator_req {
 #define RPM_KEY_MA	0x0000616d /* "ma" */
 #define RPM_KEY_FLOOR	0x00636676 /* "vfc" */
 #define RPM_KEY_CORNER	0x6e726f63 /* "corn" */
+#define RPM_KEY_MODE 0X646D736C /* LDO mode */
+
+enum ldo_mode
+{
+	LDO_MODE_LPM     = 0, // Low power mode
+	LDO_MODE_BYPASS  = 1, // Bypass mode
+	LDO_MODE_AUTO    = 2, // Auto mode
+	LDO_MODE_NPM     = 4, // Normal power mode
+	LDO_MODE_INVALID
+};
+
 
 #define RPM_MIN_FLOOR_CORNER	0
 #define RPM_MAX_FLOOR_CORNER	6
@@ -108,6 +119,24 @@ int qcom_rpm_set_corner(struct regulator *regulator, int corner)
 }
 EXPORT_SYMBOL(qcom_rpm_set_corner);
 
+static int rpm_reg_set_mode(struct regulator_dev *rdev, unsigned int mode)
+{
+	struct qcom_rpm_reg *vreg = rdev_get_drvdata(rdev);
+	struct rpm_regulator_req req;
+	u32 val = LDO_MODE_AUTO;
+	int ret;
+	if (mode == REGULATOR_MODE_NORMAL)
+		val = LDO_MODE_NPM;
+
+	req.key = cpu_to_le32(RPM_KEY_MODE);
+	req.nbytes = cpu_to_le32(sizeof(u32));
+	req.value = cpu_to_le32(val);
+
+	ret = rpm_reg_write_active(vreg, &req, sizeof(req));
+
+	return ret;
+}
+
 static int rpm_reg_enable(struct regulator_dev *rdev)
 {
 	struct qcom_rpm_reg *vreg = rdev_get_drvdata(rdev);
@@ -193,7 +222,7 @@ static const struct regulator_ops rpm_smps_ldo_ops = {
 	.disable = rpm_reg_disable,
 	.is_enabled = rpm_reg_is_enabled,
 	.list_voltage = regulator_list_voltage_linear_range,
-
+    .set_mode = rpm_reg_set_mode,
 	.get_voltage = rpm_reg_get_voltage,
 	.set_voltage = rpm_reg_set_voltage,
 
@@ -204,7 +233,7 @@ static const struct regulator_ops rpm_smps_ldo_ops_fixed = {
 	.enable = rpm_reg_enable,
 	.disable = rpm_reg_disable,
 	.is_enabled = rpm_reg_is_enabled,
-
+//	.set_mode = rpm_reg_set_mode,
 	.get_voltage = rpm_reg_get_voltage,
 	.set_voltage = rpm_reg_set_voltage,
 
@@ -355,6 +384,16 @@ static const struct regulator_desc pm8916_buck_hvo_smps = {
 	.ops = &rpm_smps_ldo_ops,
 };
 
+static unsigned int rpm_regulator_of_map_mode(unsigned int mode)
+{
+	if (mode == 1)
+		return REGULATOR_MODE_NORMAL;
+	if (mode == 2)
+		return REGULATOR_MODE_FAST;
+
+	return REGULATOR_MODE_IDLE;
+}
+
 struct rpm_regulator_data {
 	const char *name;
 	u32 type;
@@ -536,7 +575,7 @@ static int rpm_reg_probe(struct platform_device *pdev)
 		vreg->desc.name = reg->name;
 		vreg->desc.supply_name = reg->supply;
 		vreg->desc.of_match = reg->name;
-
+		vreg->desc.of_map_mode = rpm_regulator_of_map_mode;
 		config.dev = &pdev->dev;
 		config.driver_data = vreg;
 		rdev = devm_regulator_register(&pdev->dev, &vreg->desc, &config);
-- 
1.9.1

